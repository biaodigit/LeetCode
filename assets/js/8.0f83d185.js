(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{233:function(t,s,a){t.exports=a.p+"assets/img/0025-03.fd50e07c.png"},234:function(t,s,a){t.exports=a.p+"assets/img/0025-01.124240d8.png"},235:function(t,s,a){t.exports=a.p+"assets/img/0025-02.26b39368.png"},236:function(t,s,a){t.exports=a.p+"assets/img/0025-04.919c73c7.png"},237:function(t,s,a){t.exports=a.p+"assets/img/0025-05.8c491b02.png"},287:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"题目：k-个一组翻转链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目：k-个一组翻转链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 题目：K 个一组翻转链表")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("示例")]),this._v(":")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("给定这个链表："),s("code",[this._v("1->2->3->4->5")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当 k = 2 时，应当返回: "),s("code",[this._v("2->1->4->3->5")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当 k = 3 时，应当返回: "),s("code",[this._v("3->2->1->4->5")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("说明")]),this._v(":")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("你的算法只能使用常数的额外空间。")]),this._v(" "),s("li",[s("strong",[this._v("你不能只是单纯的改变节点内部的值")]),this._v("，而是需要实际的进行节点交换。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解题思路："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题思路：","aria-hidden":"true"}},[this._v("#")]),this._v(" 解题思路：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("需要注意的是根据题目"),s("code",[this._v("n*k")]),this._v("的长度不一定等于原链表长度，也就是说反转到最后如果剩下不足k个节点就不需要反转，同样要把没有反转的节点与已经完成反转的链表连接，说完大概思路后操作步骤如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("首先要算出要反转的次数，后面要根据这个算出来的结果进行循环，当结果为0时就退出循环，代码如下")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("设置一个虚拟头节点"),n("code",[t._v("dummyHead")]),t._v("指向"),n("code",[t._v("head")]),t._v("，同时设置一个"),n("code",[t._v("prev")]),t._v("，用于指向每一次反转完成后的头节点，"),n("code",[t._v("start")]),t._v("表示每组反转开始的位置\n"),n("img",{attrs:{src:a(234),alt:"0025-01.png"}}),n("br")]),t._v(" "),n("li",[t._v("在反转过程中有两层循环，第一层是判断整个链表反转是否结束，第二层是判断每一组反转是否结束，那么针对第二层循环就又需要专门设置几个变量，分别为：\n"),n("ul",[n("li",[t._v("count:每一组反转结束阈值，初始值为"),n("code",[t._v("k")]),t._v("，结束为0")]),t._v(" "),n("li",[t._v("p、q:两个反转节点")]),t._v(" "),n("li",[t._v("tail:每组反转后的尾部节点，反转结束后头部和尾部都会更新，那么头尾都需要与上一个和下一个进行新的连接")])])]),t._v(" "),n("li",[t._v("在开始每一组反转前先把"),n("code",[t._v("p")]),t._v("和"),n("code",[t._v("tail")]),t._v("赋值为"),n("code",[t._v("start")]),t._v("，"),n("code",[t._v("q")]),t._v("为"),n("code",[t._v("start.next")]),t._v(" "),n("img",{attrs:{src:a(235),alt:"0025-02.png"}}),n("br"),t._v("\n至于为什么这么做先不急着去理解，看完反转过程就很容易明白了")]),t._v(" "),n("li",[t._v("首先第二层循环判断条件代码如下")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为什么是"),a("code",[t._v("--count")]),t._v("而不是"),a("code",[t._v("count--")]),t._v("或者在循环中自减呢，原因也很简单假如k为2，意思是每组只有2个节点需要反转，那么第一次"),a("code",[t._v("--k")]),t._v("后为1，然后完成反转，再回到循环判断"),a("code",[t._v("--k")]),t._v("等于0，意味着循环结束不再需要循环了")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("当"),n("code",[t._v("count为0时")]),t._v("变量位置如下图\n"),n("img",{attrs:{src:a(236),alt:"0025-04.png"}}),n("br"),t._v("\n这个时候"),n("code",[t._v("p")]),t._v("指向的是3，"),n("code",[t._v("q")]),t._v("指向的是4，所以要进行一次新的指向操作，也就是"),n("code",[t._v("prev")]),t._v("要指向"),n("code",[t._v("p")]),t._v("，"),n("code",[t._v("tail")]),t._v("要指向"),n("code",[t._v("q")]),t._v("，同时"),n("code",[t._v("start")]),t._v("作为每一组反转的开始节点更新为"),n("code",[t._v("q")]),t._v("，"),n("code",[t._v("prev")]),t._v("作为每组反转结束后的上一个钩子节点更新为"),n("code",[t._v("tail")]),t._v("，当然还有循环次数"),n("code",[t._v("nums")]),t._v("也需要自减1")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n nums"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(237),alt:"0025-04.png"}}),s("br")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("重复上述步骤，当循环结束后返回"),s("code",[this._v("dummyHead.next")]),this._v("就是最终的结果")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 代码实现")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reverseKGroup")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dummyHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dummyHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            q "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            q "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        nums"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dummyHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}],e=a(0),r=Object(e.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。")]),t._v(" "),n("p",[t._v("k 是一个正整数，它的值小于或等于链表的长度。")]),t._v(" "),n("p",[t._v("如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("来源：力扣（LeetCode）"),n("br"),t._v("\n链接："),n("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/reverse-nodes-in-k-group"),n("OutboundLink")],1)]),t._v(" "),t._m(7),t._v(" "),n("p",[t._v("对比上一题"),n("a",{attrs:{href:"https://biaodigit.github.io/LeetCode/0024/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两两交换链表中的节点"),n("OutboundLink")],1),t._v("多了一个"),n("strong",[t._v("每k个节点为一组")]),t._v("进行交换的条件，那么这题其实可以看成是有"),n("code",[t._v("n")]),t._v("个长度为"),n("code",[t._v("k")]),t._v("的链表进行反转然后拼接在一起。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),n("p",[t._v("像上一题"),n("a",{attrs:{href:"https://biaodigit.github.io/LeetCode/0024/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两两交换链表中的节点"),n("OutboundLink")],1),t._v("一样先缓存一个"),n("code",[t._v("next")]),t._v(","),n("code",[t._v("q.next=p")]),t._v("，然后"),n("code",[t._v("p")]),t._v("更新为"),n("code",[t._v("q")]),t._v(","),n("code",[t._v("q")]),t._v("更新为"),n("code",[t._v("next")]),t._v(" "),n("img",{attrs:{src:a(233),alt:"0025-03.png"}}),n("br")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19)])},n,!1,null,null,null);s.default=r.exports}}]);