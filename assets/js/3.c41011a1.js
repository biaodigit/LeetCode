(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{241:function(t,s,a){t.exports=a.p+"assets/img/0028-01.f2cc2ab5.png"},242:function(t,s,a){t.exports=a.p+"assets/img/0028-02.2f90dded.png"},243:function(t,s,a){t.exports=a.p+"assets/img/0028-03.ea5f6ae7.png"},244:function(t,s,a){t.exports=a.p+"assets/img/0028-04.9e31cfc0.png"},245:function(t,s,a){t.exports=a.p+"assets/img/0028-05.eabd1841.png"},246:function(t,s,a){t.exports=a.p+"assets/img/0028-06.36c531fa.png"},247:function(t,s,a){t.exports=a.p+"assets/img/0028-07.3d024438.png"},248:function(t,s,a){t.exports=a.p+"assets/img/0028-09.15753999.png"},249:function(t,s,a){t.exports=a.p+"assets/img/0028-08.6118b2f0.png"},250:function(t,s,a){t.exports=a.p+"assets/img/0028-010.11baa4f7.png"},290:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"题目：实现-strstr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目：实现-strstr","aria-hidden":"true"}},[this._v("#")]),this._v(" 题目：实现 strStr()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("示例 1")]),this._v(":")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('输入: haystack = "hello", needle = "ll"\n输出: 2\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("示例 2")]),this._v(":")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('输入: haystack = "aaaaa", needle = "bba"\n输出: -1\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("说明")]),this._v(":")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当"),s("code",[this._v("needle")]),this._v("是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于本题而言，当"),s("code",[this._v("needle")]),this._v("是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解题思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 解题思路")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("一般来说做字符串匹配最容易解决的办法就是暴力解决法，暴力解决的思路就是每个字符进行对比，如果遇到不相等的字符，那么长度较短的字符串就向后退一位重新开始匹配。以下面的图为举一个简单的例子\n"),n("img",{attrs:{src:a(241),alt:"0028-01.png"}}),n("br"),t._v("\n假设匹配的字符串为"),n("code",[t._v("text")]),t._v("，模式字符串为"),n("code",[t._v("pattern")]),t._v("，开始逐个匹配，当匹配到"),n("code",[t._v("b")]),t._v("和"),n("code",[t._v("d")]),t._v("时不匹配，如下图\n"),n("img",{attrs:{src:a(242),alt:"0028-02.png"}}),n("br"),t._v("\n按暴力匹配的逻辑碰到不匹配的情况后把"),n("code",[t._v("pattern")]),t._v("后移一位继续匹配，如下图\n"),n("img",{attrs:{src:a(243),alt:"0028-03.png"}}),n("br"),t._v("\n这样做虽然可以得到我们想要的答案，但是字符串匹配作为常用于操作系统的算法在面对字符串长度巨大的情况下的时间复杂度一定是巨大并影响系统性能的，那么就需要更好的算法来提高匹配速度，所以上面提到的算法就应运而生。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"kmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp","aria-hidden":"true"}},[this._v("#")]),this._v(" KMP")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("KMP算法(Knuth-Morris-Pratt算法)相比其它比如BM算法简单的多，因为它的核心思想很简单，只需要找出相同前缀，而相同前缀的意义在于如果匹配中出现不匹配的情况，可以根据已经匹配的序列中查找是否有相同的前缀，如果有直接把模式字符串"),s("code",[this._v("pattern")]),this._v("往后移动一段距离，距离的计算公式为:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("移动距离 = 已经匹配序列的长度 - 相同前缀个数\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("再看回上面那个例子，在"),n("code",[t._v("pattern")]),t._v("中是存在相同前缀的，如下图\n"),n("img",{attrs:{src:a(244),alt:"0028-04.png"}}),n("br"),t._v("\n按照上面的公式，已经匹配的长度为5，相同前缀个数为2，计算出移动距离为3，移动后如下图\n"),n("img",{attrs:{src:a(245),alt:"0028-05.png"}}),n("br"),t._v("\n经过这么往后移动就直接匹配上了(当然这只是一个最简单的例子方便理解)，相比暴力求解的方式的效率确实高不少，那么现在重点来了，只要知道已匹配的序列中有多少个相同前缀就好办了。所以在开始把"),n("code",[t._v("text")]),t._v("和"),n("code",[t._v("pattern")]),t._v("匹配前需要对"),n("code",[t._v("pattern")]),t._v("内部进行一次相同前缀搜索，步骤如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("p",[t._v("建一个"),n("code",[t._v("lps")]),t._v("数组，即"),n("strong",[t._v("longest proper prefix")]),t._v("，lps[i]表示的是"),n("code",[t._v("pattern[0,i]")]),t._v("中最长的和前缀相同的后缀，而因为第一个字符是不存在相同前缀的，所以"),n("code",[t._v("lps[0]")]),t._v("默认为-1\n"),n("img",{attrs:{src:a(246),alt:"0028-06.png"}}),n("br")])]),t._v(" "),n("li",[n("p",[t._v("定义一个"),n("code",[t._v("j")]),t._v("，初始值为-1，这个"),n("code",[t._v("j")]),t._v("值代表的是相同前缀的最后一个索引，而一个字符串有可能不存在相同前缀，所以初始值定义为-1，然后从"),n("code",[t._v("pattern")]),t._v("第二个字符开始遍历，遍历的时候会有两种情况：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("第一种是"),n("code",[t._v("pattern[i]===pattern[j+1]")]),t._v(",如下图\n"),n("img",{attrs:{src:a(247),alt:"0028-07.png"}}),n("br"),t._v("\n当匹配相等的时候"),n("code",[t._v("j++")]),t._v("，然后"),n("code",[t._v("lps[i]=j")]),t._v(" "),n("img",{attrs:{src:a(248),alt:"0028-09.png"}}),n("br")])]),t._v(" "),n("li",[n("p",[t._v("第二种是"),n("code",[t._v("pattern[i]!==pattern[j+1]&&j>-1")]),t._v("\n首先解释下为什么会有一个"),n("code",[t._v("j>-1")]),t._v("的条件，因为"),n("code",[t._v("j>-1")]),t._v("代表的是在这个匹配项前已经存在一个相同前缀值，如果"),n("code",[t._v("j===-1&&pattern[i]!==pattern[j+1]")]),t._v(",也就是不存在相同前缀且当前匹配项不相等，那么直接走到最后一步"),n("code",[t._v("lps[i]=j")]),t._v("即可。")]),t._v(" "),n("p",[t._v("回到上面的条件如果"),n("code",[t._v("pattern[i]!==pattern[j+1]&&j>-1")]),t._v("，那么"),n("code",[t._v("j=lps[j]")]),t._v("，这段逻辑怎么去理解呢，如下图：\n"),n("img",{attrs:{src:a(249),alt:"0028-08.png"}}),n("br"),t._v("\n可以看到当匹配到"),n("code",[t._v("c")]),t._v("和"),n("code",[t._v("b")]),t._v("是不相等的，但是如果往前一看"),n("code",[t._v("[i-1,i]")]),t._v("这个区间是存在相同前缀的，"),n("code",[t._v("j=lps[j]")]),t._v("就是把"),n("code",[t._v("j")]),t._v("回退到前一个相同前缀索引继续循环    "),n("code",[t._v("pattern[i]")]),t._v("是否等于"),n("code",[t._v("pattern[j+1]")]),t._v("，简单来说就是看看前面已经得出的相同前缀有没有可以复用的。")]),t._v(" "),n("p",[t._v("上图的"),n("code",[t._v("j")]),t._v("索引为2，这个时候"),n("code",[t._v("pattern[j+1]!==pattern[i]")]),t._v("，而"),n("code",[t._v("j")]),t._v("等于2的时候已经匹配的前缀为"),n("code",[t._v("aba")]),t._v("，这个前缀的相同前缀为"),n("code",[t._v("a")]),t._v("，那么就要把"),n("code",[t._v("j")]),t._v("回退，回退后为"),n("code",[t._v("j=0")]),t._v(",然后继续判断"),n("code",[t._v("pattern[j+1]")]),t._v("是否等于"),n("code",[t._v("pattern[i]")]),t._v("，那么这个时候是相等的，所以可以算出前缀为"),n("code",[t._v("abacdabab")]),t._v("的时候复用了一个  为"),n("code",[t._v("ab")]),t._v("的  相同前缀。")])])])]),t._v(" "),n("li",[n("p",[t._v("最后"),n("code",[t._v("lps[i]=j")]),t._v(",当循环结束后"),n("code",[t._v("lps")]),t._v("数组就计算完成，如下图：\n"),n("img",{attrs:{src:a(250),alt:"0028-10.png"}}),n("br")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("把"),a("code",[t._v("lps")]),t._v("数组计算出来后"),a("code",[t._v("text")]),t._v("和"),a("code",[t._v("pattern")]),t._v("的匹配思路简单了，同样对"),a("code",[t._v("text")]),t._v("遍历一次，如果判断出"),a("code",[t._v("text[i]!==pattern[j+1]")]),t._v("时就通过"),a("code",[t._v("lps")]),t._v("找出有没有相同前缀，如果有则"),a("code",[t._v("pattern")]),t._v("往后移动继续比较，当"),a("code",[t._v("j===pattern.length-1")]),t._v("的时候代表"),a("code",[t._v("j")]),t._v("就是"),a("code",[t._v("pattern")]),t._v("在"),a("code",[t._v("text")]),t._v("中第一次出现的位置。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 代码实现")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("cal_lps")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        lps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("strStr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" needle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hlen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nlen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        lps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal_lps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" hlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nlen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" j\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}],e=a(0),r=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("实现 strStr() 函数。")]),t._v(" "),a("p",[t._v("给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("来源：力扣（LeetCode）"),a("br"),t._v("\n链接："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-strstr",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/implement-strstr"),a("OutboundLink")],1)]),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("字符串匹配算法比较经典的有KMP、BM、BF以及Sunday，在了解这些算法前要先知道这些算法诞生的原因是什么。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17)])},n,!1,null,null,null);s.default=r.exports}}]);